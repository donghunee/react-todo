{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","color","form","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","style","onClick","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","onToggle","onRemove","e","stopPropagation","concat","React","Component","TodoItemList","todos","todoList","map","src_components_TodoItem","key","Color","colors","selected","colorList","background","App","state","input","selected_color","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","index","findIndex","todo","nextTodos","Object","toConsumableArray","objectSpread","handleRemove","filter","handleColor","_this$state2","src_components_TodoListTemplate","components_Palette","src_components_Form","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b072a40e.chunk.js","sourcesContent":["import React from 'react'\nimport './TodoListTemplate.css'\n\nconst TodoListTemplate = ({color,form, children}) => {\n  return (\n    <main className=\"todo-list-template\">\n      <div className=\"title\">\n        오늘 할 일\n      </div>\n      <section className=\"color-select\">\n        {color}\n      </section>\n      <section className=\"form-wrapper\">\n        {form}\n      </section>\n      <section className=\"todos-wrapper\">\n        { children }\n      </section>\n    </main>\n  )\n}\n\nexport default TodoListTemplate","import React from 'react';\nimport './Form.css';\n\nconst Form = ({value, onChange, onCreate, onKeyPress, color}) => {\n  return (\n    <div className=\"form\">\n      <input value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color:color}}/>\n      <div className=\"create-button\" onClick={onCreate}>\n        추가\n      </div>\n    </div>\n  );\n};\n\nexport default Form;","import React from 'react'\nimport './TodoItem.css'\n\nclass TodoItem extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.checked !== nextProps.checked\n    }\n\n    render() {\n        const { text, checked, id, color,onToggle, onRemove } = this.props\n\n        return (\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\n            <div className=\"remove\" onClick={(e) => {\n                e.stopPropagation(); // onToggle 이 실행되지 않도록 함\n                onRemove(id)}\n            }>&times;</div>\n            <div className={`todo-text ${ checked ? ' checked' : '' }`}>\n            <div style={{color:color}}>{text}</div>\n            </div>\n            {\n            checked && (<div className=\"check-mark\">✓</div>)\n            }\n         </div>\n        )\n    }\n}\n\nexport default TodoItem","import React from 'react'\nimport TodoItem from './TodoItem'\n\nclass TodoItemList extends React.Component {\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.todos !== nextProps.todos\n    }\n\n    render() {\n        const { todos, onToggle, onRemove } = this.props\n\n    \n        const todoList = todos.map(\n            ({id, text, checked, color}) => (\n                <TodoItem\n                    id={id}\n                    text={text}\n                    color={color}\n                    checked={checked}\n                    onToggle={onToggle}\n                    onRemove={onRemove}\n                    key={id} \n                />\n            )\n        )\n\n        return (\n            <div>\n                {todoList}\n            </div>\n        )\n    }\n}\n\nexport default TodoItemList","import React from 'react'\nimport './Palette.css'\n\nconst Color = ({colors, selected}) => {\n\n    const colorList = colors.map(\n        (color,id) => (\n            <div\n                className=\"color-section\"\n                id={id}\n                style={{background:color}}\n                key={id}\n                onClick= {selected}\n            />\n        )\n    )\n\n    return (\n        <div className=\"color-wrapper\">\n            {colorList}\n        </div>\n    )\n}\n\nexport default Color","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList'\nimport Color from './components/Palette'\n\nclass App extends Component {\n\n  id =3\n\n\n  state = {\n    input: '',\n    selected_color: 'black',\n    color: ['#343a40', '#f03e3e', '#12b886', '#228ae6'],\n    todos: [\n      { id: 0, text: ' 리액트', checked: false, color: 'black' },\n      { id: 1, text: ' 스터디', checked: true, color: 'black'  },\n      { id: 2, text: ' 화이팅', checked: false, color: 'red'  }\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  handleCreate = () => {\n    const { input, todos } = this.state\n    this.setState({\n      input: '',\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false,\n        color: this.state.selected_color\n      })\n    })\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      this.handleCreate()\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state\n    const index = todos.findIndex(todo => todo.id ===id)\n    const selected = todos[index]\n    const nextTodos = [...todos]\n\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    }\n\n    this.setState({\n      todos: nextTodos\n    })\n  }\n\n  handleRemove = (id) => {\n    const {todos} = this.state\n    this.setState({\n      todos: todos.filter(todo => todo.id !==id) //id가 일치하지 않는 배열을 재생성\n    })\n\n  }\n\n  handleColor = (e) => {\n    const selected = this.state.color\n    const color = selected[e.target.id]\n    this.setState({\n      selected_color: color\n    })\n  }\n\n  render() {\n    const { input,todos } = this.state\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress\n    } = this\n\n    return (\n      <TodoListTemplate \n        color={\n          <Color \n            colors = {this.state.color}\n            selected = {this.handleColor}\n          />\n        } \n        form={\n        <Form\n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n          color={this.state.selected_color}\n        />}>\n        <TodoItemList todos={todos} onRemove={this.handleRemove} onToggle={this.handleToggle} />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}